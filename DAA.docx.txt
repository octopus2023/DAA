N queen


#include<iostream>
using namespace std;


int ld[30]={0};
int rd[30]={0};
int cl[30]={0};


bool nqueen(int** arr,int x,int n)
{
        if(x>=n)
        {
                return true;
        }
        for(int i=0;i<n;i++)
        {
                if(ld[i-x+n-1] != 1 && rd[i+x] != 1 && cl[i] != 1)
                {
                        arr[i][x]=1;
                        ld[i-x+n-1]=1;
                        rd[i+x]=1;
                        cl[i]=1;
                        
                        if(nqueen(arr,x+1,n))
                        {
                                return true;
                        }
                        arr[i][x]=0;
                        ld[i-x+n-1]=0;
                        rd[i+x]=0;
                        cl[i]=0;
                        
                }
        }
        return false;
}
int main()
{        
        int n;
        cout<<"Enter the n Value :";
        cin>>n;
        
        int** arr =new int*[n];
        
        for(int i=0;i<n;i++)
        {
                arr[i] = new int[n];
                
                for(int j=0;j<n;j++)
                {
                        arr[i][j]=0;
                }
        }
        if(nqueen(arr,0,n))
        {
                for(int i=0;i<n;i++)
                {
                        for(int j=0;j<n;j++)
                        {
                                cout<<arr[i][j]<<" ";
                        }
                        cout<<"\n";}}}




bellman ford
#include<iostream>
using namespace std;


int main()
{        
        int i,j,u,v,w,e,n,src,p=0,m;
        cout<<"\nEnter the number of vertices :";
        cin>>n;
        cout<<"\nEnter the source :";
        cin>>src;
        cout<<"\nEnter the number of edges :";
        cin>>e;
        
        int mat[n][n],edge[2*e],cost[n],prev[n];
        
        for(i=0;i<n;i++)
        {
                for(i=0;i<n;i++)
                {
                        mat[i][j]=0;
                }
        }
        
        cout<<"\n---------Enter edges--------------";
        for(i=0;i<e;i++)
        {
                cout<<"\nEnter the source :";
                cin>>u;
                cout<<"\nEnter the destination :";
                cin>>v;
                cout<<"\nEnter the weight :";
                cin>>w;
                
                
                edge[p]=u;
                edge[p+1]=v;
                p=p+2;
                mat[u][v]=w;
        }
        cout<<"\nadjucency matrix for graph is : \n";
        for(i-0;i<n;i++)
        {
                for(j=0;j<n;j++)
                {
                        cout<<mat[i][j]<<"\t";
                }
                cout<<"\n";
        }
        
        
        p=0;
        cout<<"\nSet of edges :";
        for(i=0;i<n;i++)
        {
                cout<<"\t"<<"("<<edge[p+1]<<")";
                p=p+2;
        }
        for(i=0;i<n;i++)
        {
                cost[i]=999;
        }
        cost[src]=0;
        
        for(i=0;i<n;i++)
        {
                p=0;
                for(j=0;j<e;j++)
                {
                        u=edge[p];
                        v=edge[p+1];
                        p=p+2;
                        
                        if(cost[u]+mat[u][v]<cost[v])
                        {
                                cost[v]=cost[u]+mat[u][v];
                        }
                }
                cout<<"\nIteration"<<i+1<<":";
                for(m=0;m<n;m++)
                {
                        cout<<cost[m]<<"\t";
                }
                if(i==0)
                {
                   for(m=0;m<n;m++)
                   {
                           prev[m]=cost[m];
                   }
                }
                else{
                        
                        int flag=0;
                        for(m=0;m<n;m++){
                                if(cost[m]!=prev[m]){
                                        flag=1;
                                        break;
                                }
                        }
                
                        if(flag==0){
                                cout<<"\n\nAs there is no change in distance matrix, we can stop here .";
                                break;
                        }
                        else if(i==n-1){
                                cout<<"\n\nThere is dissimilarity even after n-1 cycles, hence, negative edge cycle present !";
                        }
                        else{
                                for(m=0;m<n;m++){
                                        prev[m]=cost[m];
                                }
                        }
                        
                        
                }//end of else
                
        }//end of for i
        
        return 0;
        
}
        }
}




Knapsack


01


#include <iostream>


using namespace std;


int knapsack(int W, int weights[], int values[], int totalItems) {
    int dp[totalItems + 1][W + 1];


    for (int i = 0; i <= totalItems; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;
            } else if (weights[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }


    return dp[totalItems][W];
}


int main() {
    int W, totalItems;
    cout << "Enter the maximum weight capacity of the knapsack: ";
    cin >> W;
    cout << "Enter the total number of items: ";
    cin >> totalItems;


    int weights[totalItems];
    int values[totalItems];


    for (int i = 0; i < totalItems; i++) {
        cout << "Enter the weight of item " << i + 1 << ": ";
        cin >> weights[i];
        cout << "Enter the value of item " << i + 1 << ": ";
        cin >> values[i];
    }


    int max_value = knapsack(W, weights, values, totalItems);


    cout << "Maximum value that can be obtained: " << max_value << endl;


    return 0;
}




Fractional


//Fractional Knapsack using Greedy Algorithm
#include <iostream>
using namespace std;


struct object
{
        float value;
        float weight;
        float ratio;
        void rt()
        {
                ratio = value/weight;
        }
};
void sortByRatio(object s[],int n)
{
        for(int i=1;i<n;i++)
        {
                for(int j=0;j<n-1;j++)
                {
                        if(s[j].ratio > s[j+1].ratio)
                        {
                                object temp = s[j];
                                s[j] = s[j+1];
                                s[j+1] = temp;
                        }
                }
        }
}
float profit(object s[],int n,float total)
{
        float temp =total;
        float profit =0;
        for(int i=n-1;i >=0 && temp >0;i--)
        {
                if(temp >=s[i].weight)
                {
                        temp = temp - s[i].weight;
                        profit = profit + s[i].value;
                }
                else if(temp <s[i].weight)
                {
                     profit = profit + (temp*s[i].ratio);
                     return profit;
                }
        }
        return profit;
}
int main()
{
        int num;
        float total;
        cout<<"Enter the Number of Object \n";
        cin>>num;
        cout<<"Enter the total weight\n";
        cin>>total;
        object obj[20];
        
        for(int i=0;i<num;i++)
        {
                cout<<"Enter value of the object:";
                cin>>obj[i].value;
                cout<<"Enter the weight of the object:";
                cin>>obj[i].weight;
                obj[i].rt();
        }
        sortByRatio(obj,num);
        
        for(int i=0;i<num;i++)
        {
                cout<<i<<" "<<obj[i].value<<" "<<obj[i].weight<<" "<<obj[i].ratio<<endl;
        }
                cout<<endl;
                float pr =profit(obj,num,total);
                cout<<"profit is"<<pr<<endl;
                return 0;
}


TSP Using branch and boundd
#include<iostream>
using namespace std;
int inf=9999;
int n;
int mat[50][50];
int rm[50][50];
int temp[50][50];
void make_inf(int arr[],int size,int inf,int col)
{
        for(int i=0; i<size; i++)
        {
                int r=arr[i];
                for(int p=0; p<n; p++)
                {
                        temp[r][p]=inf;
                }
        }
        for(int i=0; i<n; i++)
        {
                temp[i][col]=inf;
        }
        int first=arr[0];
        temp[col][first]=inf;
        for(int i=1; i<size; i++)
        {
                int t=arr[i];
                temp[t][first]=inf;
        }
        cout<<"------------------------\n";
        for(int i=0;i<n;i++)
        {
                for(int j=0;j<n;j++)
                {
                        cout<<"\t"<<temp[i][j];
                }
                cout<<"\n";
        }
}
int check(int arr[],int size,int ch)
{
        for(int i=0; i<size; i++)
        {
                if(arr[i]==ch)
                {
                        return 1;
                }
        }
        return 0;
}
int minimization(int inf,int c)
{
        int cost=c;
        for(int i=0; i<n; i++)
        {
                int min=temp[i][0];
                for(int j=1; j<n; j++)
                {
                        if(min > temp[i][j])
                        {
                                min=temp[i][j];
                        }
                }
                if(min != inf)
                {
                        cost=cost+min;
                        for(int k=0; k<n; k++)
                        {
                                if(temp[i][k] != inf)
                                {
                                        temp[i][k]=temp[i][k]-min;
                                }
                                else
                                {
                                        temp[i][k]=inf;
                                }
                        }
                }        
        }
        for(int i=0; i<n; i++)
        {
                int min=temp[0][i];
                for(int j=1; j<n; j++)
                {
                        if(min > temp[j][i])
                        {
                                min=temp[j][i];
                        }
                }
                if(min != inf)
                {
                        cost=cost+min;
                        for(int k=0; k<n; k++)
                        {
                                if(temp[k][i] != inf)
                                {
                                        temp[k][i]=temp[k][i]-min;
                                }
                                else
                                {
                                        temp[k][i]=inf;
                                }
                        }
                }
        }
        return cost;
}
int main()
{
        cout<<"\nEnter Number of Vertices :";
        cin>>n;
        for(int i=0; i<n; i++)
        {
                for(int j=0; j<n; j++)
                {
                        mat[i][j]=inf;
                }
        }
        int e;
        cout<<"\nEnter Number of edges :";
        cin>>e;
        for(int i=0; i<e; i++)
        {
                int u,v,wt;
                cout<<"\nEnter Source Vertex :";
                cin>>u;
                cout<<"\nEnter Destination Vertex :";
                cin>>v;
                cout<<"\nEnter Weight of this edge :";
                cin>>wt;
                mat[u][v]=wt;
        }
        cout<<"------Distance matrix------\n";
        for(int i=0;i<n;i++)
        {
                for(int j=0;j<n;j++)
                {
                        cout<<"\t"<<mat[i][j];
                }
                cout<<"\n";
        }
        int cost=0;
        for(int i=0; i<n; i++)
        {
                int min=mat[i][0];
                for(int j=1; j<n; j++)
                {
                        if(min > mat[i][j])
                        {
                                min=mat[i][j];
                        }
                }        
                cost=cost+min;
                for(int k=0; k<n; k++)
                {
                        if(mat[i][k] != inf)
                        {
                                rm[i][k]=mat[i][k]-min;
                        }
                        else
                        {
                                rm[i][k]=inf;
                        }
                }
        }
        cout<<"------Row Minimization------\n";
        for(int i=0;i<n;i++)
        {
                for(int j=0;j<n;j++)
                {
                        cout<<"\t"<<rm[i][j];
                }
                cout<<"\n";
        }
        for(int i=0; i<n; i++)
        {
                int min=rm[0][i];
                for(int j=1; j<n; j++)
                {
                        if(min > rm[j][i])
                        {
                                min=rm[j][i];
                        }
                }
                cost=cost+min;
                for(int k=0; k<n; k++)
                {
                        if(rm[k][i] != inf)
                        {
                                rm[k][i]=rm[k][i]-min;
                        }
                        else
                        {
                                rm[k][i]=inf;
                        }        
                }
        }
        cout<<"------Column Minimization------\n";
        for(int i=0;i<n;i++)
        {
                for(int j=0;j<n;j++)
                {
                        cout<<"\t"<<rm[i][j];
                }
                cout<<"\n";
        }
        int visited[n];
        int size=0;
        visited[size]=0;
        size++;
        int ans=cost;
        while(true)
        {
                int min=INT_MAX;
                int min_ind=0;
                for(int j=1; j<n; j++)
                {
                        int ch=check(visited,size,j);
                        if(ch==0)
                        {
                                int c1=0;
                                for(int p=0; p<n; p++)
                                {
                                        for(int q=0; q<n; q++)
                                        {
                                                temp[p][q]=rm[p][q];
                                        }
                                }
                                make_inf(visited,size,inf,j);
                                c1=minimization(inf,cost);
                                c1=c1+rm[visited[size-1]][j];
                                if(c1 < min)
                                {
                                        min=c1;
                                        min_ind=j;
                                }
                        }
                }
                for(int p=0; p<n; p++)
                {
                        for(int q=0; q<n; q++)
                        {
                                temp[p][q]=rm[p][q];
                        }
                }
                make_inf(visited,size,inf,min_ind);
                int tpp=minimization(inf,cost);
                for(int p=0; p<n; p++)
                {
                        for(int q=0; q<n; q++)
                        {
                                rm[p][q]=temp[p][q];
                        }
                }
                visited[size]=min_ind;
                size++;
                cost=min;
                if(size==n)
                {
                        break;
                }
        }
        cout<<"\nPath :- "<<endl;
        for(int k=0; k<size; k++)
        {
                cout<<visited[k]<<" --> ";
        }
        cout<<visited[0];
        cout<<"\nMinimum cost "<<cost;
        return 0;
}